{"version":3,"sources":["Resources/Images/game_chat_box.png","Components/ChattingView/ChattingViewPresenter.js","Components/MeetView/OptionSelector.js","Components/MeetView/ChatBox.js","Components/MeetView/MeetViewPresenter.js","Components/MeetView/index.js","Components/MeetView/MeetViewContainer.js","GlobalStyles.js","Utils/BGMPlayer.js","Utils/ScriptInterpreter.js","App.js","serviceWorker.js","index.js","Resources/Images/cyfc_top_logo.png"],"names":["module","exports","styled","div","img","span","Container","OptionList","ul","OptionItem","li","OptionSelector","options","setChatState","onOptionClicked","reaction","nextId","e","stopPropagation","step","CHAT_STEP_REACTION","map","i","answer","key","onClick","ChatBoxImage","Contents","NameText","TalkText","ChatBox","scriptInterpreter","currentScene","characterName","sceneScript","nextSceneId","useState","chatState","console","log","clickEvent","getNextScene","useEffect","window","addEventListener","src","ChatBoxBackgroundImage","BackgroundImage","imageSrc","CharacterImage","MeetViewPresenter","MeetViewContainer","createGlobalStyle","bgm","reset","ScriptInterpreter","fileName","currentSceneState","filePath","this","scenes","setCurrentScene","a","fetch","data","json","nextSceneIndex","findIndex","scene","sceneId","alert","BGMPlayer","play","Audio","currentTime","pause","App","GlobalStyles","MeetView","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b80eba8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game_chat_box.008fe626.png\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport CYFCLogoImage from \"../../Resources/Images/cyfc_top_logo.png\";\n\nconst AppBarHeight = 64;\n\nconst Container = styled.div``;\n\nconst AppBar = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: ${AppBarHeight}px;\n  border-bottom: 2px solid #bcbcbc;\n  background-color: white;\n`;\nconst LogoImage = styled.img`\n  height: 70%;\n`;\n\nconst Contents = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: ${AppBarHeight}px;\n`;\nconst DateText = styled.span`\n  color: #939393;\n  margin: 10px;\n`;\nconst LeftMessage = styled.span`\n  align-self: flex-start;\n  margin: 15px;\n  padding: 15px;\n  border-radius: 15px 15px 15px 3px;\n  background-image: linear-gradient(#e86ecb, #a21ccb);\n  color: white;\n`;\nconst RightMessage = styled.span`\n  align-self: flex-end;\n  margin: 15px;\n  padding: 12px;\n  border: 3px solid #a21ccb;\n  border-radius: 15px 15px 3px 15px;\n  border-image-slice: 1;\n  color: #662d91;\n`;\n\nconst ChattingViewPresenter = (props) => (\n  <Container>\n    <AppBar>\n      <LogoImage src={CYFCLogoImage} alt=\"CYFC\"></LogoImage>\n    </AppBar>\n    <Contents>\n      <DateText>오늘</DateText>\n      <LeftMessage>당신의 이름은?</LeftMessage>\n      <RightMessage>나의 이름은 <input type=\"text\"></input></RightMessage>\n    </Contents>\n  </Container>\n);\n\nexport default ChattingViewPresenter;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CHAT_STEP_REACTION } from \"./ChatBox\";\n\nconst Container = styled.div``;\nconst OptionList = styled.ul``;\nconst OptionItem = styled.li`\n  font-size: 2.2vw;\n  cursor: pointer;\n  font-weight: 400;\n  margin-bottom: 0.5vw;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst OptionSelector = ({ options, setChatState }) => {\n  const onOptionClicked = (reaction, nextId) => (e) => {\n    e.stopPropagation()\n    setChatState({ step: CHAT_STEP_REACTION, reaction, nextId });\n  };\n  return (\n    <Container>\n      <OptionList>\n        {options.map(({ answer, reaction, nextId }, i) => (\n          <OptionItem key={i} onClick={onOptionClicked(reaction, nextId)}>\n            {answer}\n          </OptionItem>\n        ))}\n      </OptionList>\n    </Container>\n  );\n};\n\nexport default OptionSelector;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport ChatBoxBackgroundImage from \"../../Resources/Images/game_chat_box.png\";\nimport OptionSelector from \"./OptionSelector\";\n\nconst Container = styled.div`\n  position: absolute;\n  left: 10%;\n  bottom: 30px;\n  width: 80%;\n`;\nconst ChatBoxImage = styled.img`\n  width: 100%;\n`;\nconst Contents = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  padding: 3% 10%;\n`;\nconst NameText = styled.span`\n  font-weight: bolder;\n  font-size: 3vw;\n  margin-bottom: 10px;\n  color: #662d91;\n`;\nconst TalkText = styled.span`\n  font-size: 2vw;\n  margin-left: 10px;\n  color: black;\n`;\n\nexport const CHAT_STEP_SCRIPT = \"script\";\nexport const CHAT_STEP_OPTION = \"option\";\nexport const CHAT_STEP_REACTION = \"reaction\";\n\nconst ChatBox = ({ scriptInterpreter }) => {\n  const {\n    characterName = \"\",\n    sceneScript = \"\",\n    options = [],\n    nextSceneId = \"\",\n  } = scriptInterpreter.currentScene;\n  const [chatState, setChatState] = useState({\n    step: CHAT_STEP_SCRIPT,\n  });\n\n  console.log( chatState.step )\n\n  const clickEvent = (e) => {\n    if (chatState.step === CHAT_STEP_OPTION) return;\n    setChatState((chatState) => {\n      const { step, nextId = null } = chatState;\n      if (step === CHAT_STEP_SCRIPT) {\n        return { step: CHAT_STEP_OPTION };\n      } else if (step === CHAT_STEP_REACTION) {\n        scriptInterpreter.getNextScene(nextId);\n        return {\n          step: CHAT_STEP_SCRIPT,\n        };\n      }\n      return chatState;\n    });\n    e.stopPropagation();\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"click\", clickEvent);\n  }, []);\n\n  return (\n    <Container>\n      <ChatBoxImage src={ChatBoxBackgroundImage}></ChatBoxImage>\n      <Contents>\n        {chatState.step !== CHAT_STEP_OPTION ? (\n          <>\n            <NameText>{characterName}</NameText>\n            <TalkText>\n              {chatState.step === CHAT_STEP_REACTION\n                ? chatState.reaction\n                : sceneScript}\n            </TalkText>\n          </>\n        ) : (\n          <OptionSelector\n            options={options}\n            setChatState={setChatState}\n          ></OptionSelector>\n        )}\n      </Contents>\n    </Container>\n  );\n};\n\nexport default ChatBox;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ChatBox from \"./ChatBox\";\n\n\nconst Container = styled.div``;\n\nconst BackgroundImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: center;\n  background-size: cover;\n`;\n\nconst CharacterImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: bottom;\n  background-size: cover;\n  background-repeat: no-repeat;\n  transform-origin: bottom center;\n  transform: scale(0.9);\n`;\n\nconst MeetViewPresenter = ({ scriptInterpreter }) => {\n  return (\n    <Container>\n      <BackgroundImage\n        imageSrc={\"./res/img/background/amy bar_final.png\"}\n      ></BackgroundImage>\n      <CharacterImage\n        imageSrc={\"./res/img/character/02 궁금.png\"}\n      ></CharacterImage>\n      <ChatBox\n        scriptInterpreter={scriptInterpreter}\n      ></ChatBox>\n    </Container>\n  );\n};\n\nexport default MeetViewPresenter;\n","import MeetViewContainer from \"./MeetViewContainer\";\n\nexport default MeetViewContainer;\n","import React from \"react\";\nimport MeetViewPresenter from \"./MeetViewPresenter\";\n\nconst MeetViewContainer = ({ scriptInterpreter }) => {\n  return (\n    <MeetViewPresenter\n      scriptInterpreter={scriptInterpreter}\n    ></MeetViewPresenter>\n  );\n};\n\nexport default MeetViewContainer;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n  ${reset}\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFMedium.ttf);\n    font-weight: 400;\n  }\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFBold.ttf);\n    font-weight: 600;\n  }\n  a {\n      text-decoration: none;\n      color: inherit;\n  }\n  body {\n    font-family: \"GmarketSans\", -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n`;\n","var bgm;\n\nconst BGMPlayer = {\n  play: (fileName) => {\n    bgm = new Audio();\n    bgm.src = `./res/bgm/${fileName}`;\n    bgm.addEventListener('ended', function() {\n      this.currentTime = 0;\n      this.play();\n    }, false);\n    bgm.play()\n  },\n  pause: () => {\n    bgm.pause()\n  }\n};\n\nexport default BGMPlayer;\n","import { useState, useEffect } from \"react\";\n\nconst ScriptInterpreter = function (fileName) {\n  const currentSceneState = useState({\n    characterName: \"\",\n    sceneScript: \"\",\n    options: [],\n  });\n  const filePath = `./res/scenes/${fileName}`;\n  this.scenes = [];\n  this.currentScene = currentSceneState[0];\n  this.setCurrentScene = currentSceneState[1];\n\n  useEffect(() => {\n    (async () => {\n      const data = await fetch(filePath);\n      this.scenes = await data.json();\n      this.setCurrentScene(this.scenes[0]);\n    })();\n  }, []);\n\n  useEffect(() => console.log(this.currentScene), [this.currentScene]);\n\n  this.getNextScene = (nextSceneId) => {\n    const nextSceneIndex = this.scenes.findIndex(\n      (scene) => scene.sceneId === nextSceneId\n    );\n    if( nextSceneIndex === -1 )\n    {\n      alert( `${nextSceneId}이 존재하지 않음`)\n      return;\n    }\n    this.setCurrentScene(this.scenes[nextSceneIndex]);\n  };\n};\n\nexport default ScriptInterpreter;\n","import React from 'react';\nimport './App.css';\nimport ChattingView from './Components/ChattingView'\nimport MeetView from './Components/MeetView'\nimport GlobalStyles from './GlobalStyles';\nimport ScriptInterpreter from './Utils/ScriptInterpreter';\nimport BGMPlayer from './Utils/BGMPlayer'\n\nwindow.addEventListener(\"loaded\", () => {\n  BGMPlayer.play('amy.mp3')\n})\n\nfunction App() {\n  var scriptInterpreter = new ScriptInterpreter(\"amy_male.txt\")\n\n  return (\n    <>\n      <GlobalStyles/>\n      <MeetView scriptInterpreter={scriptInterpreter}></MeetView>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cyfc_top_logo.5562f7f2.png\";"],"sourceRoot":""}