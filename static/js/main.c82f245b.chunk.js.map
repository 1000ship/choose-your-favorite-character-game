{"version":3,"sources":["Resources/Images/cyfc_top_logo.png","Resources/Images/game_chat_box.png","Utils/ScriptParser.js","Components/ChattingView/OptionMessage.js","Components/ChattingView/ChattingViewPresenter.js","Components/ChattingView/index.js","Components/ChattingView/ChattingViewContainer.js","Utils/constant.js","Components/MeetView/OptionSelector.js","Components/MeetView/ChatBox.js","Components/MeetView/MeetViewPresenter.js","Utils/SoundPlayer.js","Components/MeetView/index.js","Components/MeetView/MeetViewContainer.js","GlobalStyles.js","Utils/ScriptInterpreter.js","Utils/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScriptParser","getText","script","data","name","result","originals","match","keys","map","str","join","trim","forEach","original","i","replace","getSpecials","tuple","RightMessage","styled","span","OptionList","ul","OptionItem","li","OptionMessage","selectOption","options","answer","reaction","nextId","option","key","onClick","e","dangerouslySetInnerHTML","__html","Container","div","AppBar","LogoImage","img","Contents","DateText","LeftMessage","ChattingViewPresenter","chatList","scene","src","CYFCLogoImage","alt","who","message","length","sceneType","ChattingViewContainer","scriptInterpreter","setSceneType","useState","setChatList","useEffect","doCurrentScene","currentScene","sceneScript","nextSceneId","characterName","push","getNextScene","setTimeout","optionIndex","OptionSelector","onOptionClicked","stopPropagation","ChatBoxImage","NameText","TalkText","ChatBox","meetData","ChatBoxBackgroundImage","step","sound","BackgroundImage","imageSrc","CharacterImage","MeetViewPresenter","stepEvent","folderName","backgroundImage","characterImage","sceneSound","SoundPlayer","play","fileName","pause","Audio","MeetViewContainer","setMeetData","createInitScene","newScene","updateData","Object","assign","specialData","console","log","bg","createGlobalStyle","reset","ScriptInterpreter","this","scenes","setFolderName","setScenes","nextSceneIndex","findIndex","sceneId","alert","loadScript","a","filePath","fetch","json","App","scriptLoaded","setScriptLoaded","what","window","prompt","then","GlobalStyles","ChattingView","MeetView","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c82f245b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cyfc_top_logo.5562f7f2.png\";","module.exports = __webpack_public_path__ + \"static/media/game_chat_box.008fe626.png\";","import React from 'react';\n\nconst ScriptParser = {\n  getText: ( script, data = {name: \"성혁\"} ) => {\n    let result = script\n    const originals = result.match(/{\\w*}/g) ?? []\n    const keys = originals.map( str => str.match(/\\w*/g).join(\"\").trim() )\n    originals.forEach( (original, i) => result = result.replace(original, data[keys[i]]) )\n    result = result.replace( /{input:\\w*}/g, \"<input type='text'/>\" )\n    result = result.replace( /{\\w*:.+\\.?\\w*}/g, \"\" )\n    return result\n  },\n  getSpecials: (script) => {\n    let result = {}\n    const specials = script.match( /{\\w*:.+\\.?\\w*}/g ) ?? []\n    const tuples = specials.map( str => str.match( /[^{:}]+/g ) )\n    tuples.forEach( tuple => result[tuple[0]] = tuple[1])\n    return result;\n  }\n}\n\nexport default ScriptParser","import React from \"react\";\nimport styled from \"styled-components\";\nimport ScriptParser from \"../../Utils/ScriptParser\";\n\nconst RightMessage = styled.span`\n  align-self: flex-end;\n  margin: 15px;\n  padding: 12px;\n  border: 3px solid #a21ccb;\n  border-radius: 15px 15px 3px 15px;\n  border-image-slice: 1;\n  color: #662d91;\n`;\n\nconst OptionList = styled.ul``;\nconst OptionItem = styled.li`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst OptionMessage = ({\n  selectOption,\n  options = [{ answer: \"ㅎㅇ\", reaction: \"?\", nextId: \"\" }],\n}) => {\n  return (\n    <RightMessage>\n      <OptionList>\n        {options.map((option, i) => (\n          <OptionItem\n            key={i}\n            onClick={(e) => selectOption(i)}\n            dangerouslySetInnerHTML={{\n              __html: ScriptParser.getText(option.answer),\n            }}\n          ></OptionItem>\n        ))}\n      </OptionList>\n    </RightMessage>\n  );\n};\n\nexport default OptionMessage;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CYFCLogoImage from \"../../Resources/Images/cyfc_top_logo.png\";\nimport OptionMessage from \"./OptionMessage\";\nimport ScriptParser from \"../../Utils/ScriptParser\";\n\nconst AppBarHeight = 64;\n\nconst Container = styled.div``;\n\nconst AppBar = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: ${AppBarHeight}px;\n  border-bottom: 2px solid #bcbcbc;\n  background-color: white;\n`;\nconst LogoImage = styled.img`\n  height: 70%;\n`;\n\nconst Contents = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: ${AppBarHeight}px;\n`;\nconst DateText = styled.span`\n  color: #939393;\n  margin: 10px;\n`;\nconst LeftMessage = styled.span`\n  align-self: flex-start;\n  margin: 5px;\n  padding: 15px;\n  border-radius: 15px 15px 15px 3px;\n  background-image: linear-gradient(#e86ecb, #a21ccb);\n  color: white;\n`;\nconst RightMessage = styled.span`\n  align-self: flex-end;\n  margin: 5px;\n  padding: 12px;\n  border: 3px solid #a21ccb;\n  border-radius: 15px 15px 3px 15px;\n  border-image-slice: 1;\n  color: #662d91;\n`;\n\nconst ChattingViewPresenter = ({ chatList, scene, selectOption }) => (\n  <Container>\n    <AppBar>\n      <LogoImage src={CYFCLogoImage} alt=\"CYFC\"></LogoImage>\n    </AppBar>\n    <Contents>\n      <DateText>오늘</DateText>\n      {chatList.map(({ who, message }, i) =>\n        who === \"left\" ? (\n          <LeftMessage\n            key={i}\n            dangerouslySetInnerHTML={{ __html: ScriptParser.getText(message) }}\n          ></LeftMessage>\n        ) : (\n          <RightMessage\n            key={i}\n            dangerouslySetInnerHTML={{ __html: ScriptParser.getText(message) }}\n          ></RightMessage>\n        )\n      )}\n      {scene.options?.length > 0 && scene.sceneType !== \"ending\" && (\n        <OptionMessage\n          options={scene.options}\n          selectOption={selectOption}\n        ></OptionMessage>\n      )}\n    </Contents>\n  </Container>\n);\n\nexport default ChattingViewPresenter;\n","import ChattingViewContainer from './ChattingViewContainer'\n\nexport default ChattingViewContainer;","import React, { useState, useEffect } from \"react\";\nimport ChattingViewPresenter from \"./ChattingViewPresenter\";\nimport {\n  SCENE_TYPE_MEET,\n  SCENE_TYPE_CHANGE_DURATION,\n} from \"../../Utils/constant\";\n\nconst ChattingViewContainer = ({ scriptInterpreter, setSceneType }) => {\n  const [chatList, setChatList] = useState([]);\n\n  useEffect(() => doCurrentScene(), []);\n\n  const doCurrentScene = () => {\n    const {\n      sceneType,\n      sceneScript,\n      options,\n      nextSceneId,\n      characterName,\n    } = scriptInterpreter.currentScene;\n    if (sceneType === SCENE_TYPE_MEET) {\n      setTimeout(\n        () => setSceneType(SCENE_TYPE_MEET),\n        SCENE_TYPE_CHANGE_DURATION\n      );\n      return;\n    }\n    setChatList((chatList) => {\n      const result = [...chatList];\n      if (sceneScript?.length > 0)\n        result.push({\n          who: characterName === \"{name}\" ? \"right\" : \"left\",\n          message: sceneScript,\n        });\n      return result;\n    });\n    if (options?.length === 0) {\n      scriptInterpreter.getNextScene(nextSceneId);\n      doCurrentScene();\n    }\n  };\n\n  const selectOption = (optionIndex) => {\n    const { answer, reaction, nextId } = scriptInterpreter.currentScene.options[\n      optionIndex\n    ];\n    setChatList((chatList) => {\n      const result = [...chatList];\n      if (answer?.length > 0) result.push({ who: \"right\", message: answer });\n      if (reaction?.length > 0) result.push({ who: \"left\", message: reaction });\n      return result;\n    });\n    scriptInterpreter.getNextScene(nextId);\n    doCurrentScene();\n  };\n\n  return (\n    <ChattingViewPresenter\n      chatList={chatList}\n      scene={scriptInterpreter.currentScene}\n      selectOption={selectOption}\n    ></ChattingViewPresenter>\n  );\n};\n\nexport default ChattingViewContainer;\n","export const DEFAULT_SCENE = {\n  sceneId: \"\",\n  characterName: \"\",\n  sceneScript: \"\",\n  characterImage: \"\",\n  backgroundImage: \"\",\n  sceneSound: \"\",\n  nextSceneId: \"\",\n  options: [\n    {\n      answer: \"\",\n      reaction: \"\",\n      nextId: \"\",\n    },\n  ],\n  sceneType: \"meet\",\n};\n\nexport const SCENE_TYPE_TEXT = \"text\"\nexport const SCENE_TYPE_MEET = \"meet\"\nexport const SCENE_TYPE_ENDING = \"ending\"\n\nexport const MEET_STEP_SCRIPT = \"script\";\nexport const MEET_STEP_OPTION = \"option\";\nexport const MEET_STEP_REACTION = \"reaction\";\n\nexport const SCENE_TYPE_CHANGE_DURATION = 2000;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CHAT_STEP_REACTION } from \"./ChatBox\";\nimport ScriptParser from \"../../Utils/ScriptParser\";\n\nconst Container = styled.div``;\nconst OptionList = styled.ul``;\nconst OptionItem = styled.li`\n  font-size: 2.2vw;\n  cursor: pointer;\n  font-weight: 400;\n  margin-bottom: 0.5vw;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst OptionSelector = ({ options, selectOption }) => {\n  const onOptionClicked = (i) => (e) => {\n    selectOption(i);\n    e.stopPropagation();\n  };\n  return (\n    <Container>\n      <OptionList>\n        {options.map(({ answer }, i) => (\n          <OptionItem\n            key={i}\n            onClick={onOptionClicked(i)}\n            dangerouslySetInnerHTML={{ __html: ScriptParser.getText(answer) }}\n          ></OptionItem>\n        ))}\n      </OptionList>\n    </Container>\n  );\n};\n\nexport default OptionSelector;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport OptionSelector from \"./OptionSelector\";\nimport ChatBoxBackgroundImage from \"../../Resources/Images/game_chat_box.png\";\nimport { MEET_STEP_OPTION, MEET_STEP_REACTION } from \"../../Utils/constant\";\nimport ScriptParser from \"../../Utils/ScriptParser\";\n\nconst Container = styled.div`\n  position: absolute;\n  left: 10%;\n  bottom: 30px;\n  width: 80%;\n`;\nconst ChatBoxImage = styled.img`\n  width: 100%;\n`;\nconst Contents = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  padding: 3% 10%;\n`;\nconst NameText = styled.span`\n  font-weight: bolder;\n  font-size: 3vw;\n  margin-bottom: 10px;\n  color: #662d91;\n`;\nconst TalkText = styled.span`\n  font-size: 2vw;\n  margin-left: 10px;\n  color: black;\n`;\n\nconst ChatBox = ({ meetData, selectOption }) => {\n  return (\n    <Container>\n      <ChatBoxImage src={ChatBoxBackgroundImage}></ChatBoxImage>\n      <Contents>\n        {meetData.step !== MEET_STEP_OPTION ? (\n          <>\n            <NameText\n              dangerouslySetInnerHTML={{\n                __html: ScriptParser.getText(meetData.characterName),\n              }}\n            ></NameText>\n            <TalkText\n              dangerouslySetInnerHTML={{\n                __html: ScriptParser.getText(\n                  meetData.step === MEET_STEP_REACTION\n                    ? meetData.options[meetData.optionIndex].reaction\n                    : meetData.sceneScript\n                ),\n              }}\n            ></TalkText>\n          </>\n        ) : (\n          <OptionSelector\n            options={meetData.options}\n            selectOption={selectOption}\n          ></OptionSelector>\n        )}\n      </Contents>\n    </Container>\n  );\n};\n\nexport default ChatBox;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ChatBox from \"./ChatBox\";\n\nconst Container = styled.div``;\n\nconst BackgroundImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: center;\n  background-size: cover;\n`;\n\nconst CharacterImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n  transform-origin: bottom center;\n  transform: scale(0.9);\n`;\n\nconst MeetViewPresenter = ({ meetData, stepEvent, selectOption }) => {\n  const { folderName, backgroundImage, characterImage, sceneSound } = meetData;\n  return (\n    <Container onClick={stepEvent}>\n      {backgroundImage?.length > 0 && (\n        <BackgroundImage\n          imageSrc={`./res/img/background/${folderName}/${backgroundImage}`}\n        >{backgroundImage}</BackgroundImage>\n      )}\n      {characterImage?.length > 0 && (\n        <CharacterImage\n          imageSrc={`./res/img/character/${folderName}/${characterImage}`}\n        >{characterImage}<br></br>{sceneSound}</CharacterImage>\n      )}\n      <ChatBox meetData={meetData} selectOption={selectOption}></ChatBox>\n    </Container>\n  );\n};\n\nexport default MeetViewPresenter;\n","var sound;\n\nconst SoundPlayer = {\n  play: (folderName, fileName) => {\n    try {\n      if (sound) sound.pause();\n    } catch {}\n    sound = new Audio();\n    sound.src = `./res/sounds/${folderName}/${fileName}`;\n    sound.play();\n  },\n  pause: () => {\n    sound.pause();\n  },\n};\n\nexport default SoundPlayer;\n","import MeetViewContainer from \"./MeetViewContainer\";\n\nexport default MeetViewContainer;\n","import React, { useState, useEffect } from \"react\";\nimport MeetViewPresenter from \"./MeetViewPresenter\";\nimport {\n  SCENE_TYPE_TEXT,\n  SCENE_TYPE_ENDING,\n  MEET_STEP_OPTION,\n  MEET_STEP_REACTION,\n  MEET_STEP_SCRIPT,\n  SCENE_TYPE_CHANGE_DURATION,\n} from \"../../Utils/constant\";\nimport ScriptParser from \"../../Utils/ScriptParser\";\nimport SoundPlayer from \"../../Utils/SoundPlayer\";\n\nconst MeetViewContainer = ({ scriptInterpreter, setSceneType }) => {\n  const [meetData, setMeetData] = useState({\n    step: MEET_STEP_SCRIPT,\n    characterName: \"\",\n    sceneScript: \"\",\n    options: [],\n    optionIndex: 0,\n    folderName: scriptInterpreter.folderName,\n  });\n\n  useEffect(() => doCurrentScene(), []);\n\n  const createInitScene = (newScene, data = {}) => {\n    const folderName = scriptInterpreter.folderName\n    const {\n      characterName,\n      sceneScript,\n      backgroundImage,\n      characterImage,\n      sceneType,\n      options,\n      nextSceneId,\n      sceneSound\n    } = newScene;\n    let updateData = {\n      step: MEET_STEP_SCRIPT,\n      characterName,\n      sceneScript,\n      options,\n      nextSceneId,\n      sceneSound,\n    };\n    if (backgroundImage?.length > 0)\n      updateData.backgroundImage = backgroundImage.trim();\n    if (characterImage?.length > 0)\n      updateData.characterImage = characterImage.trim();\n    if (sceneType === SCENE_TYPE_TEXT) setSceneType(SCENE_TYPE_TEXT);\n    else if (sceneType === SCENE_TYPE_ENDING) updateData.characterImage = \"\";\n    if (sceneScript?.length === 0) updateData.step = MEET_STEP_OPTION;\n    if (sceneSound?.length > 0) SoundPlayer.play(folderName, sceneSound);\n    return Object.assign(Object.assign({}, data), updateData);\n  };\n\n  const doCurrentScene = () => {\n    const { sceneType } = scriptInterpreter.currentScene;\n    if (sceneType === SCENE_TYPE_TEXT) {\n      setTimeout(\n        () => setSceneType(SCENE_TYPE_TEXT),\n        SCENE_TYPE_CHANGE_DURATION\n      );\n      return;\n    }\n    setMeetData((data) =>\n      createInitScene(scriptInterpreter.currentScene, data)\n    );\n  };\n\n  const stepFromScript = () => {\n    setMeetData((data) => {\n      if (data.options?.length === 0) {\n        scriptInterpreter.getNextScene(data.nextSceneId);\n        return createInitScene(scriptInterpreter.currentScene, data);\n      } else {\n        return { ...data, step: MEET_STEP_OPTION };\n      }\n    });\n  };\n\n  const stepFromReaction = () => {\n    setMeetData((data) => {\n      const { optionIndex } = data;\n      const nextId =\n        data.options?.length > 0\n          ? data.options[optionIndex].nextId\n          : data.nextSceneId;\n      scriptInterpreter.getNextScene(nextId);\n      return createInitScene(scriptInterpreter.currentScene, data);\n    });\n  };\n\n  const selectOption = (optionIndex) => {\n    setMeetData((data) => {\n      let result = {\n        ...data,\n        step: MEET_STEP_REACTION,\n        optionIndex,\n      };\n      if (data.options[optionIndex].reaction?.length === 0) {\n        const nextId =\n          data.options?.length > 0\n            ? data.options[optionIndex].nextId\n            : data.nextSceneId;\n        scriptInterpreter.getNextScene(nextId);\n        return createInitScene(scriptInterpreter.currentScene, data);\n      }\n      const script = data.options[optionIndex].reaction;\n      const specialData = ScriptParser.getSpecials(script);\n      if (specialData) console.log(specialData);\n      if (specialData?.img) result.characterImage = specialData.img;\n      if (specialData?.bg) result.backgroundImage = specialData.bg;\n      return result;\n    });\n  };\n\n  return (\n    <MeetViewPresenter\n      meetData={meetData}\n      stepEvent={\n        meetData.step === MEET_STEP_SCRIPT\n          ? stepFromScript\n          : meetData.step === MEET_STEP_REACTION\n          ? stepFromReaction\n          : null\n      }\n      selectOption={selectOption}\n    ></MeetViewPresenter>\n  );\n};\n\nexport default MeetViewContainer;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n  ${reset}\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFMedium.ttf);\n    font-weight: 400;\n  }\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFBold.ttf);\n    font-weight: 600;\n  }\n  a {\n      text-decoration: none;\n      color: inherit;\n  }\n  body {\n    font-family: \"GmarketSans\", -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n`;\n","export const SCRIPT_AMY_MALE = \"amy_male.txt\";\nexport const SCRIPT_AMY_FEMALE = \"amy_female.txt\";\nexport const SCRIPT_BELLA = \"bella.txt\";\nexport const SCRIPT_CLAIR = \"clair.txt\";\n\nconst ScriptInterpreter = function (folderName = \"\") {\n  this.folderName = folderName;\n  this.scenes = [];\n  this.currentScene = null;\n\n  this.setFolderName = (folderName) => {\n    this.folderName = folderName;\n  };\n\n  this.setScenes = (scenes) => {\n    this.scenes = scenes;\n    this.currentScene = this.scenes[0];\n  };\n\n  this.getNextScene = (nextSceneId) => {\n    const nextSceneIndex = this.scenes.findIndex(\n      (scene) => scene.sceneId === nextSceneId\n    );\n    if (nextSceneIndex === -1) {\n      alert(`${nextSceneId}이 존재하지 않음`);\n      return;\n    }\n    this.currentScene = this.scenes[nextSceneIndex];\n    console.log(this.currentScene);\n    return this.currentScene;\n  };\n};\n\nexport default ScriptInterpreter;\n","export const loadScript = async (fileName) => {\n  const filePath = `./res/scenes/${fileName}`;\n  const data = await fetch(filePath);\n  const scenes = await data.json();\n  return scenes;\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ChattingView from \"./Components/ChattingView\";\nimport MeetView from \"./Components/MeetView\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport ScriptInterpreter from \"./Utils/ScriptInterpreter\";\nimport BGMPlayer from \"./Utils/BGMPlayer\";\nimport { loadScript } from \"./Utils/api\";\nimport { SCENE_TYPE_TEXT } from \"./Utils/constant\";\nimport ScriptParser from \"./Utils/ScriptParser\";\n\n// BGMPlayer.play('amy.mp3')\n\nconst scriptInterpreter = new ScriptInterpreter();\n\nfunction App() {\n  const [sceneType, setSceneType] = useState(SCENE_TYPE_TEXT);\n  const [scriptLoaded, setScriptLoaded] = useState(false);\n  useEffect(() => {\n    let what = \"\"\n    what = window.prompt(\"amy_male.txt/amy_female.txt/bella.txt/clair.txt\");\n    if (what?.length === 0) what = \"amy_male.txt\";\n    let folderName;\n    switch (what) {\n      case \"amy_male.txt\":\n      case \"amy_female.txt\":\n        folderName = \"Amy\";\n        break;\n      case \"bella.txt\":\n        folderName = \"Bella\";\n        break;\n      case \"clair.txt\":\n        folderName = \"Clair\";\n        break;\n    }\n    loadScript(what).then((data) => {\n      scriptInterpreter.setScenes(data);\n      scriptInterpreter.setFolderName(folderName);\n      setScriptLoaded(true);\n      setSceneType(scriptInterpreter.currentScene.sceneType);\n    });\n  }, []);\n\n  return (\n    <>\n      <GlobalStyles />\n      {scriptLoaded &&\n        (scriptInterpreter.currentScene.sceneType === SCENE_TYPE_TEXT ? (\n          <ChattingView\n            scriptInterpreter={scriptInterpreter}\n            setSceneType={setSceneType}\n          ></ChattingView>\n        ) : (\n          <MeetView\n            scriptInterpreter={scriptInterpreter}\n            setSceneType={setSceneType}\n          ></MeetView>\n        ))}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}