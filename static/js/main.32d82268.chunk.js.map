{"version":3,"sources":["Resources/Images/cyfc_top_logo.png","Resources/Images/game_chat_box.png","Components/ChattingView/OptionMessage.js","Components/ChattingView/ChattingViewPresenter.js","Components/ChattingView/index.js","Components/ChattingView/ChattingViewContainer.js","Utils/constant.js","Components/MeetView/OptionSelector.js","Components/MeetView/ChatBox.js","Components/MeetView/MeetViewPresenter.js","Components/MeetView/index.js","Components/MeetView/MeetViewContainer.js","GlobalStyles.js","Utils/ScriptInterpreter.js","Utils/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RightMessage","styled","span","OptionList","ul","OptionItem","li","OptionMessage","selectOption","options","answer","reaction","nextId","map","option","i","key","onClick","e","Container","div","AppBar","LogoImage","img","Contents","DateText","LeftMessage","ChattingViewPresenter","chatList","scene","src","CYFCLogoImage","alt","who","message","length","sceneType","ChattingViewContainer","scriptInterpreter","setSceneType","useState","setChatList","useEffect","doCurrentScene","currentScene","sceneScript","nextSceneId","result","push","getNextScene","setTimeout","optionIndex","OptionSelector","onOptionClicked","stopPropagation","ChatBoxImage","NameText","TalkText","ChatBox","meetData","ChatBoxBackgroundImage","step","characterName","BackgroundImage","imageSrc","CharacterImage","MeetViewPresenter","stepEvent","backgroundImage","characterImage","MeetViewContainer","setMeetData","createInitScene","newScene","data","updateData","trim","Object","assign","createGlobalStyle","reset","ScriptInterpreter","this","scenes","setScenes","nextSceneIndex","findIndex","sceneId","console","log","alert","loadScript","fileName","a","filePath","fetch","json","App","scriptLoaded","setScriptLoaded","what","window","prompt","then","GlobalStyles","ChattingView","MeetView","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.32d82268.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cyfc_top_logo.5562f7f2.png\";","module.exports = __webpack_public_path__ + \"static/media/game_chat_box.008fe626.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst RightMessage = styled.span`\n  align-self: flex-end;\n  margin: 15px;\n  padding: 12px;\n  border: 3px solid #a21ccb;\n  border-radius: 15px 15px 3px 15px;\n  border-image-slice: 1;\n  color: #662d91;\n`;\n\nconst OptionList = styled.ul``;\nconst OptionItem = styled.li`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst OptionMessage = ({\n  selectOption,\n  options = [{ answer: \"ㅎㅇ\", reaction: \"?\", nextId: \"\" }],\n}) => {\n  return (\n    <RightMessage>\n      <OptionList>\n        {options.map((option, i) => (\n          <OptionItem key={i} onClick={(e) => selectOption(i)}>\n            {option.answer}\n          </OptionItem>\n        ))}\n      </OptionList>\n    </RightMessage>\n  );\n};\n\nexport default OptionMessage;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CYFCLogoImage from \"../../Resources/Images/cyfc_top_logo.png\";\nimport OptionMessage from \"./OptionMessage\";\n\nconst AppBarHeight = 64;\n\nconst Container = styled.div``;\n\nconst AppBar = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: ${AppBarHeight}px;\n  border-bottom: 2px solid #bcbcbc;\n  background-color: white;\n`;\nconst LogoImage = styled.img`\n  height: 70%;\n`;\n\nconst Contents = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: ${AppBarHeight}px;\n`;\nconst DateText = styled.span`\n  color: #939393;\n  margin: 10px;\n`;\nconst LeftMessage = styled.span`\n  align-self: flex-start;\n  margin: 5px;\n  padding: 15px;\n  border-radius: 15px 15px 15px 3px;\n  background-image: linear-gradient(#e86ecb, #a21ccb);\n  color: white;\n`;\nconst RightMessage = styled.span`\n  align-self: flex-end;\n  margin: 5px;\n  padding: 12px;\n  border: 3px solid #a21ccb;\n  border-radius: 15px 15px 3px 15px;\n  border-image-slice: 1;\n  color: #662d91;\n`;\n\nconst ChattingViewPresenter = ({ chatList, scene, selectOption }) => (\n  <Container>\n    <AppBar>\n      <LogoImage src={CYFCLogoImage} alt=\"CYFC\"></LogoImage>\n    </AppBar>\n    <Contents>\n      <DateText>오늘</DateText>\n      {chatList.map(({ who, message }, i) =>\n        who === \"left\" ? (\n          <LeftMessage key={i}>{message}</LeftMessage>\n        ) : (\n          <RightMessage key={i}>{message}</RightMessage>\n        )\n      )}\n      {scene.options?.length > 0 && scene.sceneType !== \"ending\" && (\n        <OptionMessage\n          options={scene.options}\n          selectOption={selectOption}\n        ></OptionMessage>\n      )}\n    </Contents>\n  </Container>\n);\n\nexport default ChattingViewPresenter;\n","import ChattingViewContainer from './ChattingViewContainer'\n\nexport default ChattingViewContainer;","import React, { useState, useEffect } from \"react\";\nimport ChattingViewPresenter from \"./ChattingViewPresenter\";\nimport { SCENE_TYPE_MEET, SCENE_TYPE_CHANGE_DURATION } from \"../../Utils/constant\";\n\nconst ChattingViewContainer = ({ scriptInterpreter, setSceneType }) => {\n  const [chatList, setChatList] = useState([\n    { who: \"left\", message: \"당신의 이름은?\" },\n    { who: \"right\", message: \"나의 이름은 ...\" },\n  ]);\n\n  useEffect(() => doCurrentScene(), []);\n\n  const doCurrentScene = () => {\n    const { sceneType, sceneScript, options, nextSceneId } = scriptInterpreter.currentScene;\n    if(sceneType === SCENE_TYPE_MEET){\n      setTimeout(() => setSceneType(SCENE_TYPE_MEET), SCENE_TYPE_CHANGE_DURATION);\n      return\n    }\n    setChatList((chatList) => {\n      const result = [...chatList]\n      if(sceneScript?.length > 0) result.push({ who: \"left\", message: sceneScript })\n      return result\n    })\n    if( options?.length === 0 ){\n      scriptInterpreter.getNextScene( nextSceneId )\n      doCurrentScene()\n    }\n  };\n\n  const selectOption = (optionIndex) => {\n    const {answer, reaction, nextId} = scriptInterpreter.currentScene.options[optionIndex]\n    setChatList((chatList) => {\n      const result = [...chatList]\n      if(answer?.length > 0) result.push({ who: \"right\", message: answer })\n      if(reaction?.length > 0) result.push({ who: \"left\", message: reaction })\n      return result\n    })\n    scriptInterpreter.getNextScene( nextId )\n    doCurrentScene()\n  }\n\n  return (\n    <ChattingViewPresenter\n      chatList={chatList}\n      scene={scriptInterpreter.currentScene}\n      selectOption={selectOption}\n    ></ChattingViewPresenter>\n  );\n};\n\nexport default ChattingViewContainer;\n","export const DEFAULT_SCENE = {\n  sceneId: \"\",\n  characterName: \"\",\n  sceneScript: \"\",\n  characterImage: \"\",\n  backgroundImage: \"\",\n  sceneSound: \"\",\n  nextSceneId: \"\",\n  options: [\n    {\n      answer: \"\",\n      reaction: \"\",\n      nextId: \"\",\n    },\n  ],\n  sceneType: \"meet\",\n};\n\nexport const SCENE_TYPE_TEXT = \"text\"\nexport const SCENE_TYPE_MEET = \"meet\"\nexport const SCENE_TYPE_ENDING = \"ending\"\n\nexport const MEET_STEP_SCRIPT = \"script\";\nexport const MEET_STEP_OPTION = \"option\";\nexport const MEET_STEP_REACTION = \"reaction\";\n\nexport const SCENE_TYPE_CHANGE_DURATION = 2000;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CHAT_STEP_REACTION } from \"./ChatBox\";\n\nconst Container = styled.div``;\nconst OptionList = styled.ul``;\nconst OptionItem = styled.li`\n  font-size: 2.2vw;\n  cursor: pointer;\n  font-weight: 400;\n  margin-bottom: 0.5vw;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst OptionSelector = ({ options, selectOption }) => {\n  const onOptionClicked = (i) => (e) => {\n    selectOption(i);\n    e.stopPropagation();\n  };\n  return (\n    <Container>\n      <OptionList>\n        {options.map(({ answer }, i) => (\n          <OptionItem key={i} onClick={onOptionClicked(i)}>\n            {answer}\n          </OptionItem>\n        ))}\n      </OptionList>\n    </Container>\n  );\n};\n\nexport default OptionSelector;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport OptionSelector from \"./OptionSelector\";\nimport ChatBoxBackgroundImage from \"../../Resources/Images/game_chat_box.png\";\nimport { MEET_STEP_OPTION, MEET_STEP_REACTION } from \"../../Utils/constant\";\n\nconst Container = styled.div`\n  position: absolute;\n  left: 10%;\n  bottom: 30px;\n  width: 80%;\n`;\nconst ChatBoxImage = styled.img`\n  width: 100%;\n`;\nconst Contents = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  padding: 3% 10%;\n`;\nconst NameText = styled.span`\n  font-weight: bolder;\n  font-size: 3vw;\n  margin-bottom: 10px;\n  color: #662d91;\n`;\nconst TalkText = styled.span`\n  font-size: 2vw;\n  margin-left: 10px;\n  color: black;\n`;\n\nconst ChatBox = ({\n  meetData,\n  selectOption,\n}) => {\n  return (\n    <Container>\n      <ChatBoxImage src={ChatBoxBackgroundImage}></ChatBoxImage>\n      <Contents>\n        {/* <span>step : {meetData.step}</span> */}\n        {meetData.step !== MEET_STEP_OPTION ? (\n          <>\n            <NameText>{meetData.characterName}</NameText>\n            <TalkText>\n              {meetData.step === MEET_STEP_REACTION\n                ? meetData.options[meetData.optionIndex].reaction\n                : meetData.sceneScript}\n            </TalkText>\n          </>\n        ) : (\n          <OptionSelector\n            options={meetData.options}\n            selectOption={selectOption}\n          ></OptionSelector>\n        )}\n      </Contents>\n    </Container>\n  );\n};\n\nexport default ChatBox;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ChatBox from \"./ChatBox\";\n\nconst Container = styled.div``;\n\nconst BackgroundImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: center;\n  background-size: cover;\n`;\n\nconst CharacterImage = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-image: url('${({ imageSrc }) => imageSrc}');\n  background-position: bottom;\n  background-size: cover;\n  background-repeat: no-repeat;\n  transform-origin: bottom center;\n  transform: scale(0.9);\n`;\n\nconst MeetViewPresenter = ({ meetData, stepEvent, selectOption }) => {\n  const { characterName, backgroundImage, characterImage } = meetData;\n  return (\n    <Container onClick={stepEvent}>\n      {backgroundImage?.length > 0 && (\n        <BackgroundImage\n          imageSrc={`./res/img/background/${characterName}/${backgroundImage}`}\n        >{backgroundImage}</BackgroundImage>\n      )}\n      {characterImage?.length > 0 && (\n        <CharacterImage\n          imageSrc={`./res/img/character/${characterName}/${characterImage}`}\n        >{characterImage}</CharacterImage>\n      )}\n      <ChatBox meetData={meetData} selectOption={selectOption}></ChatBox>\n    </Container>\n  );\n};\n\nexport default MeetViewPresenter;\n","import MeetViewContainer from \"./MeetViewContainer\";\n\nexport default MeetViewContainer;\n","import React, { useState, useEffect } from \"react\";\nimport MeetViewPresenter from \"./MeetViewPresenter\";\nimport {\n  SCENE_TYPE_TEXT,\n  SCENE_TYPE_ENDING,\n  MEET_STEP_OPTION,\n  MEET_STEP_REACTION,\n  MEET_STEP_SCRIPT,\n  SCENE_TYPE_CHANGE_DURATION,\n} from \"../../Utils/constant\";\n\nconst MeetViewContainer = ({ scriptInterpreter, setSceneType }) => {\n  const [meetData, setMeetData] = useState({\n    step: MEET_STEP_SCRIPT,\n    characterName: \"\",\n    sceneScript: \"\",\n    options: [],\n    optionIndex: 0,\n  });\n\n  useEffect(() => doCurrentScene(), []);\n\n  const createInitScene = (newScene, data = {}) => {\n    const {\n      characterName,\n      sceneScript,\n      backgroundImage,\n      characterImage,\n      sceneType,\n      options,\n      nextSceneId,\n    } = newScene;\n    let updateData = {\n      step: MEET_STEP_SCRIPT,\n      characterName,\n      sceneScript,\n      options,\n      nextSceneId,\n    };\n    if (backgroundImage?.length > 0)\n      updateData.backgroundImage = backgroundImage.trim();\n    if (characterImage?.length > 0)\n      updateData.characterImage = characterImage.trim();\n    if (sceneType === SCENE_TYPE_ENDING) updateData.characterImage = \"\";\n    if (sceneScript?.length === 0) updateData.step = MEET_STEP_OPTION;\n    return Object.assign(Object.assign({}, data), updateData);\n  };\n\n  const doCurrentScene = () => {\n    const { sceneType } = scriptInterpreter.currentScene;\n    if (sceneType === SCENE_TYPE_TEXT) {\n      setTimeout(\n        () => setSceneType(SCENE_TYPE_TEXT),\n        SCENE_TYPE_CHANGE_DURATION\n      );\n      return;\n    }\n    setMeetData((data) => createInitScene(scriptInterpreter.currentScene));\n  };\n\n  const stepFromScript = () => {\n    setMeetData((data) => {\n      if (data.options?.length === 0) {\n        scriptInterpreter.getNextScene(data.nextSceneId);\n        return createInitScene(scriptInterpreter.currentScene, data);\n      } else {\n        return { ...data, step: MEET_STEP_OPTION };\n      }\n    });\n  };\n\n  const stepFromReaction = () => {\n    setMeetData((data) => {\n      const { optionIndex } = data;\n      const nextId =\n        data.options?.length > 0\n          ? data.options[optionIndex].nextId\n          : data.nextSceneId;\n      scriptInterpreter.getNextScene(nextId);\n      return createInitScene(scriptInterpreter.currentScene, data);\n    });\n  };\n\n  const selectOption = (optionIndex) => {\n    setMeetData((data) => {\n      let result = {\n        ...data,\n        step: MEET_STEP_REACTION,\n        optionIndex,\n      };\n      if (data.options[optionIndex].reaction?.length === 0) {\n        const nextId =\n          data.options?.length > 0\n            ? data.options[optionIndex].nextId\n            : data.nextSceneId;\n        scriptInterpreter.getNextScene(nextId);\n        return createInitScene(scriptInterpreter.currentScene, data);\n      }\n      return result;\n    });\n  };\n\n  return (\n    <MeetViewPresenter\n      meetData={meetData}\n      stepEvent={\n        meetData.step === MEET_STEP_SCRIPT\n          ? stepFromScript\n          : meetData.step === MEET_STEP_REACTION\n          ? stepFromReaction\n          : null\n      }\n      selectOption={selectOption}\n    ></MeetViewPresenter>\n  );\n};\n\nexport default MeetViewContainer;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nexport default createGlobalStyle`\n  ${reset}\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFMedium.ttf);\n    font-weight: 400;\n  }\n  @font-face {\n    font-family: \"GmarketSans\";\n    src: url(./res/fonts/GmarketSansTTFBold.ttf);\n    font-weight: 600;\n  }\n  a {\n      text-decoration: none;\n      color: inherit;\n  }\n  body {\n    font-family: \"GmarketSans\", -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n`;\n","const ScriptInterpreter = function () {\n  this.scenes = [];\n  this.currentScene = null;\n\n  this.setScenes = (scenes) => {\n    this.scenes = scenes;\n    this.currentScene = this.scenes[0];\n  };\n\n  this.getNextScene = (nextSceneId) => {\n    const nextSceneIndex = this.scenes.findIndex(\n      (scene) => scene.sceneId === nextSceneId\n    );\n    if (nextSceneIndex === -1) {\n      alert(`${nextSceneId}이 존재하지 않음`);\n      return;\n    }\n    this.currentScene = this.scenes[nextSceneIndex];\n    console.log(this.currentScene)\n    return this.currentScene\n  };\n};\n\nexport default ScriptInterpreter;\n","export const loadScript = async (fileName) => {\n  const filePath = `./res/scenes/${fileName}`;\n  const data = await fetch(filePath);\n  const scenes = await data.json();\n  return scenes;\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ChattingView from \"./Components/ChattingView\";\nimport MeetView from \"./Components/MeetView\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport ScriptInterpreter from \"./Utils/ScriptInterpreter\";\nimport BGMPlayer from \"./Utils/BGMPlayer\";\nimport { loadScript } from \"./Utils/api\";\nimport { SCENE_TYPE_TEXT } from \"./Utils/constant\";\n\n// BGMPlayer.play('amy.mp3')\n\nconst scriptInterpreter = new ScriptInterpreter();\n\nfunction App() {\n  const [sceneType, setSceneType] = useState(SCENE_TYPE_TEXT);\n  const [scriptLoaded, setScriptLoaded] = useState(false);\n  useEffect(() => {\n    let what = window.prompt(\"amy_male.txt/amy_female.txt/bella.txt/clair.txt\")\n    if(what?.length === 0 ) what = \"amy_male.txt\"\n    loadScript(what).then((data) => {\n      scriptInterpreter.setScenes(data);\n      setScriptLoaded(true);\n      setSceneType(scriptInterpreter.currentScene.sceneType);\n    });\n  }, []);\n\n  return (\n    <>\n      <GlobalStyles />\n      {scriptLoaded &&\n        (scriptInterpreter.currentScene.sceneType === SCENE_TYPE_TEXT ? (\n          <ChattingView\n            scriptInterpreter={scriptInterpreter}\n            setSceneType={setSceneType}\n          ></ChattingView>\n        ) : (\n          <MeetView\n            scriptInterpreter={scriptInterpreter}\n            setSceneType={setSceneType}\n          ></MeetView>\n        ))}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}